AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template to deploy Lambda functions, IAM roles and Step Function for Workforce Identity Vizualization'

Parameters:
  S3SourceBucketName:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Name of the SSM parameter containing the S3 bucket with all Lambda function code
    Default: 'aria-source-bucket'

  S3ExportBucketName:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Name of the SSM parameter containing the S3 bucket to export all IdC csv data to
    Default: 'aria-export-bucket'
    
  CreateTablesS3Key:
    Type: String
    Description: S3 key (path) to the CreateTables Lambda function code zip file
    Default: 'createtables.zip'
  
  ListUsersS3Key:
    Type: String
    Description: S3 key (path) to the ListUsers Lambda function code zip file
    Default: 'listusers.zip'

  ListGroupsS3Key:
    Type: String
    Description: S3 key (path) to the ListGroups Lambda function code zip file
    Default: 'listgroups.zip'

  ListGroupMembershipS3Key:
    Type: String
    Description: S3 key (path) to the ListGroupMembership Lambda function code zip file
    Default: 'listgroupmembership.zip'

  ListPermissionSetsS3Key:
    Type: String
    Description: S3 key (path) to the ListPermissionSets Lambda function code zip file
    Default: 'listpermissionsets.zip'

  ListProvisionedPermissionSetsS3Key:
    Type: String
    Description: S3 key (path) to the ListProvisionedPermissionSets Lambda function code zip file
    Default: 'listprovisionedpermissionsets.zip'

  ListAccountsS3Key:
    Type: String
    Description: S3 key (path) to the ListAccounts Lambda function code zip file
    Default: 'listaccounts.zip'

  ListUserAccountAssignmentsS3Key:
    Type: String
    Description: S3 key (path) to the ListUserAccountAssignments Lambda function code zip file
    Default: 'listuseraccountassignments.zip'

  ListGroupAccountAssignmentsS3Key:
    Type: String
    Description: S3 key (path) to the ListGroupAccountAssignments Lambda function code zip file
    Default: 'listgroupaccountassignments.zip'

  GetIAMRolesS3Key:
    Type: String
    Description: S3 key (path) to the GetIAMRoles Lambda function code zip file
    Default: 'getiamroles.zip'
  
  S3ExportS3Key:
    Type: String
    Description: S3 key (path) to the S3Export Lambda function code zip file
    Default: 's3export.zip'
  
  AccessAnalyzerFindingIngestionS3Key:
    Type: String
    Description: S3 key (path) to the AccessAnalyzerFindingIngestion Lambda function code zip file
    Default: 'accessanalyzerfindingingestion.zip'

  PythonHandler:
    Type: String
    Description: The Python handler function
    Default: lambda_function.lambda_handler

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups:
      - 
        Label: 
          default: "S3 Bucket SSM Parameters"
        Parameters:
          - S3SourceBucketName
          - S3ExportBucketName
      - 
        Label: 
          default: "Lambda Functions"
        Parameters: 
          - CreateTablesS3Key
          - ListUsersS3Key
          - ListGroupsS3Key
          - ListGroupMembershipS3Key
          - ListPermissionSetsS3Key
          - ListProvisionedPermissionSetsS3Key
          - ListAccountsS3Key
          - ListUserAccountAssignmentsS3Key
          - ListGroupAccountAssignmentsS3Key
          - GetIAMRolesS3Key
          - S3ExportS3Key
          - AccessAnalyzerFindingIngestionS3Key
      - 
        Label: 
          default: "Python Handler"
        Parameters:
          - PythonHandler

Resources:
  # CreateTables

  # IAM Role for CreateTables Lambda
  CreateTablesLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: Using managed policy for Lambda VPC Access that may contain a wildcard which is outside of our control
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CreateTablesLambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: !Sub 'arn:aws:s3:::${S3SourceBucketName}/${CreateTablesS3Key}'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-CreateTables-function:*'
              - Effect: Allow
                Action:
                  # Table Management Permissions
                  - 'dynamodb:CreateTable'
                  - 'dynamodb:DeleteTable'
                  - 'dynamodb:UpdateTable'
                  - 'dynamodb:DescribeTable'
                  # Additional permissions needed for table operations
                  - 'dynamodb:ListTables'
                  - 'dynamodb:DescribeLimits'
                  - 'dynamodb:UpdateTimeToLive'
                  - 'dynamodb:DescribeTimeToLive'
                  - 'dynamodb:TagResource'
                Resource: 
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/AriaIdC*'
      Tags:
        - Key: aria
          Value: role

  # CreateTables Lambda Function
  CreateTablesLambdaFunction:
    Type: 'AWS::Lambda::Function'
    #checkov:skip=CKV_AWS_116:No need for Dead Letter Queue (DLQ)
    #checkov:skip=CKV_AWS_173:No need to encrypt env variables as nothing sensitive
    #checkov:skip=CKV_AWS_117:Lambda does not need to be in a VPC
    #checkov:skip=CKV_AWS_115:Lambda does not need ReservedConcurrentExecutions
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Lambda does not need to be in a VPC
          - id: W92
            reason: Lambda does not need ReservedConcurrentExecutions
    Properties:
      FunctionName: !Sub '${AWS::StackName}-CreateTables-function'
      Handler: !Ref PythonHandler
      Role: !GetAtt CreateTablesLambdaExecutionRole.Arn
      PackageType: Zip
      Code:
        S3Bucket: !Ref S3SourceBucketName
        S3Key: !Ref CreateTablesS3Key
      Runtime: python3.13
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          STACK_NAME: !Ref 'AWS::StackName'
          PYTHON_PATH: '/var/task'
      TracingConfig:
        Mode: Active
      Architectures:
        - arm64
      Tags:
          - Key: aria
            Value: lambda

  # CloudWatch Log Group for CreateTables Lambda
  CreateTablesLambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    #checkov:skip=CKV_AWS_158:No sensitive data is written out by the Lambda function to the CloudWatch log group
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: No sensitive data is written out by the Lambda function to the CloudWatch log group
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-CreateTables-function'
      RetentionInDays: 30
      Tags:
          - Key: aria
            Value: log

  # IAM Role for ListUsers Lambda
  ListUsersLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: Using managed policy for Lambda VPC Access that may contain a wildcard which is outside of our control
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ListUsersLambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: !Sub 'arn:aws:s3:::${S3SourceBucketName}/${ListUsersS3Key}'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-ListUsers-function:*'
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                Resource: 
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/AriaIdCUsers'
              - Effect: Allow
                Action:
                  - 'identitystore:ListUsers'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'sso:ListInstances'
                Resource: '*'
      Tags:
            - Key: aria
              Value: role

  # ListUsers Lambda Function
  ListUsersLambdaFunction:
    Type: 'AWS::Lambda::Function'
    #checkov:skip=CKV_AWS_116:No need for Dead Letter Queue (DLQ)
    #checkov:skip=CKV_AWS_173:No need to encrypt env variables as nothing sensitive
    #checkov:skip=CKV_AWS_117:Lambda does not need to be in a VPC
    #checkov:skip=CKV_AWS_115:Lambda does not need ReservedConcurrentExecutions
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Lambda does not need to be in a VPC
          - id: W92
            reason: Lambda does not need ReservedConcurrentExecutions
    Properties:
      FunctionName: !Sub '${AWS::StackName}-ListUsers-function'
      Handler: !Ref PythonHandler
      Role: !GetAtt ListUsersLambdaExecutionRole.Arn
      PackageType: Zip
      Code:
        S3Bucket: !Ref S3SourceBucketName
        S3Key: !Ref ListUsersS3Key
      Runtime: python3.13
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          STACK_NAME: !Ref 'AWS::StackName'
          PYTHON_PATH: '/var/task'
      TracingConfig:
        Mode: Active
      Architectures:
        - arm64
      Tags:
          - Key: aria
            Value: function

  # CloudWatch Log Group for ListUsers Lambda
  ListUsersLambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    #checkov:skip=CKV_AWS_158:No sensitive data is written out by the Lambda function to the CloudWatch log group
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: No sensitive data is written out by the Lambda function to the CloudWatch log group
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-ListUsers-function'
      RetentionInDays: 30
      Tags:
          - Key: aria
            Value: log

  # IAM Role for ListGroups Lambda
  ListGroupsLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: Using managed policy for Lambda VPC Access that may contain a wildcard which is outside of our control
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ListGroupsLambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: !Sub 'arn:aws:s3:::${S3SourceBucketName}/${ListGroupsS3Key}'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-ListGroups-function:*'
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                Resource: 
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/AriaIdCGroups'
              - Effect: Allow
                Action:
                  - 'identitystore:ListGroups'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'sso:ListInstances'
                Resource: '*'
      Tags:
            - Key: aria
              Value: role

  # ListGroups Lambda Function
  ListGroupsLambdaFunction:
    Type: 'AWS::Lambda::Function'
    #checkov:skip=CKV_AWS_116:No need for Dead Letter Queue (DLQ)
    #checkov:skip=CKV_AWS_173:No need to encrypt env variables as nothing sensitive
    #checkov:skip=CKV_AWS_117:Lambda does not need to be in a VPC
    #checkov:skip=CKV_AWS_115:Lambda does not need ReservedConcurrentExecutions
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Lambda does not need to be in a VPC
          - id: W92
            reason: Lambda does not need ReservedConcurrentExecutions
    Properties:
      FunctionName: !Sub '${AWS::StackName}-ListGroups-function'
      Handler: !Ref PythonHandler
      Role: !GetAtt ListGroupsLambdaExecutionRole.Arn
      PackageType: Zip
      Code:
        S3Bucket: !Ref S3SourceBucketName
        S3Key: !Ref ListGroupsS3Key
      Runtime: python3.13
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          STACK_NAME: !Ref 'AWS::StackName'
          PYTHON_PATH: '/var/task'
      TracingConfig:
        Mode: Active
      Architectures:
        - arm64
      Tags:
          - Key: aria
            Value: function
      
  # CloudWatch Log Group for ListGroups Lambda
  ListGroupsLambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    #checkov:skip=CKV_AWS_158:No sensitive data is written out by the Lambda function to the CloudWatch log group
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: No sensitive data is written out by the Lambda function to the CloudWatch log group
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-ListGroups-function'
      RetentionInDays: 30
      Tags:
          - Key: aria
            Value: log

  # IAM Role for ListGroupMembership Lambda
  ListGroupMembershipLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: Using managed policy for Lambda VPC Access that may contain a wildcard which is outside of our control
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ListGroupMembershipLambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: !Sub 'arn:aws:s3:::${S3SourceBucketName}/${ListGroupMembershipS3Key}'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-ListGroupMembership-function:*'
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Scan'
                Resource: 
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/AriaIdCGroupMembership'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/AriaIdCGroups'
              - Effect: Allow
                Action:
                  - 'identitystore:ListGroups'
                  - 'identitystore:ListGroupMemberships'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'sso:ListInstances'
                Resource: '*'
      Tags:
            - Key: aria
              Value: role

  # ListGroupMembership Lambda Function
  ListGroupMembershipLambdaFunction:
    Type: 'AWS::Lambda::Function'
    #checkov:skip=CKV_AWS_116:No need for Dead Letter Queue (DLQ)
    #checkov:skip=CKV_AWS_173:No need to encrypt env variables as nothing sensitive
    #checkov:skip=CKV_AWS_117:Lambda does not need to be in a VPC
    #checkov:skip=CKV_AWS_115:Lambda does not need ReservedConcurrentExecutions
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Lambda does not need to be in a VPC
          - id: W92
            reason: Lambda does not need ReservedConcurrentExecutions
    Properties:
      FunctionName: !Sub '${AWS::StackName}-ListGroupMembership-function'
      Handler: !Ref PythonHandler
      Role: !GetAtt ListGroupMembershipLambdaExecutionRole.Arn
      PackageType: Zip
      Code:
        S3Bucket: !Ref S3SourceBucketName
        S3Key: !Ref ListGroupMembershipS3Key
      Runtime: python3.13
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          STACK_NAME: !Ref 'AWS::StackName'
          PYTHON_PATH: '/var/task'
      TracingConfig:
        Mode: Active
      Architectures:
        - arm64
      Tags:
          - Key: aria
            Value: function

  # CloudWatch Log Group for ListGroupMembership Lambda
  ListGroupMembershipLambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    #checkov:skip=CKV_AWS_158:No sensitive data is written out by the Lambda function to the CloudWatch log group
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: No sensitive data is written out by the Lambda function to the CloudWatch log group
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-ListGroupMembership-function'
      RetentionInDays: 30
      Tags:
          - Key: aria
            Value: log

  # IAM Role for ListPermissionSets Lambda
  ListPermissionSetsLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: Using managed policy for Lambda VPC Access that may contain a wildcard which is outside of our control
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ListPermissionSetsLambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: !Sub 'arn:aws:s3:::${S3SourceBucketName}/${ListPermissionSetsS3Key}'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-ListPermissionSets-function:*'
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                Resource: 
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/AriaIdCPermissionSets'
              - Effect: Allow
                Action:
                  - 'identitystore:ListGroups'
                  - 'sso:ListInstances'
                  - 'sso:ListPermissionSets'
                  - 'sso:DescribePermissionSet'
                Resource: '*'
      Tags:
            - Key: aria
              Value: role

  # ListPermissionSets Lambda Function
  ListPermissionSetsLambdaFunction:
    Type: 'AWS::Lambda::Function'
    #checkov:skip=CKV_AWS_116:No need for Dead Letter Queue (DLQ)
    #checkov:skip=CKV_AWS_173:No need to encrypt env variables as nothing sensitive
    #checkov:skip=CKV_AWS_117:Lambda does not need to be in a VPC
    #checkov:skip=CKV_AWS_115:Lambda does not need ReservedConcurrentExecutions
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Lambda does not need to be in a VPC
          - id: W92
            reason: Lambda does not need ReservedConcurrentExecutions
    Properties:
      FunctionName: !Sub '${AWS::StackName}-ListPermissionSets-function'
      Handler: !Ref PythonHandler
      Role: !GetAtt ListPermissionSetsLambdaExecutionRole.Arn
      PackageType: Zip
      Code:
        S3Bucket: !Ref S3SourceBucketName
        S3Key: !Ref ListPermissionSetsS3Key
      Runtime: python3.13
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          STACK_NAME: !Ref 'AWS::StackName'
          PYTHON_PATH: '/var/task'
      TracingConfig:
        Mode: Active
      Architectures:
        - arm64
      Tags:
          - Key: aria
            Value: function

  # CloudWatch Log Group for ListPermissionSets Lambda
  ListPermissionSetsLambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    #checkov:skip=CKV_AWS_158:No sensitive data is written out by the Lambda function to the CloudWatch log group
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: No sensitive data is written out by the Lambda function to the CloudWatch log group
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-ListPermissionSets-function'
      RetentionInDays: 30
      Tags:
          - Key: aria
            Value: log

  # IAM Role for ListProvisionedPermissionSets Lambda
  ListProvisionedPermissionSetsLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: Using managed policy for Lambda VPC Access that may contain a wildcard which is outside of our control
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ListProvisionedPermissionSetsLambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: !Sub 'arn:aws:s3:::${S3SourceBucketName}/${ListProvisionedPermissionSetsS3Key}'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-ListProvisionedPermissionSets-function:*'
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:BatchWriteItem'
                Resource: 
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/AriaIdCProvisionedPermissionSets'
              - Effect: Allow
                Action:
                  - 'sso:ListInstances'
                  - 'sso:ListPermissionSetsProvisionedToAccount'
                  - 'organizations:ListAccounts'
                  - 'organizations:DescribeOrganization'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'dynamodb:Scan'
                Resource: 
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/AriaIdCAccounts'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/AriaIdCPermissionSets'
      Tags:
            - Key: aria
              Value: role

  # ListProvisionedPermissionSets Lambda Function
  ListProvisionedPermissionSetsLambdaFunction:
    Type: 'AWS::Lambda::Function'
    #checkov:skip=CKV_AWS_116:No need for Dead Letter Queue (DLQ)
    #checkov:skip=CKV_AWS_173:No need to encrypt env variables as nothing sensitive
    #checkov:skip=CKV_AWS_117:Lambda does not need to be in a VPC
    #checkov:skip=CKV_AWS_115:Lambda does not need ReservedConcurrentExecutions
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Lambda does not need to be in a VPC
          - id: W92
            reason: Lambda does not need ReservedConcurrentExecutions
    Properties:
      FunctionName: !Sub '${AWS::StackName}-ListProvisionedPermissionSets-function'
      Handler: !Ref PythonHandler
      Role: !GetAtt ListProvisionedPermissionSetsLambdaExecutionRole.Arn
      PackageType: Zip
      Code:
        S3Bucket: !Ref S3SourceBucketName
        S3Key: !Ref ListProvisionedPermissionSetsS3Key
      Runtime: python3.13
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          STACK_NAME: !Ref 'AWS::StackName'
          PYTHON_PATH: '/var/task'
      TracingConfig:
        Mode: Active
      Architectures:
        - arm64
      Tags:
          - Key: aria
            Value: function

  # CloudWatch Log Group for ListProvisionedPermissionSets Lambda
  ListProvisionedPermissionSetsLambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    #checkov:skip=CKV_AWS_158:No sensitive data is written out by the Lambda function to the CloudWatch log group
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: No sensitive data is written out by the Lambda function to the CloudWatch log group
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-ListProvisionedPermissionSets-function'
      RetentionInDays: 30
      Tags:
          - Key: aria
            Value: log

# IAM Role for ListAccounts Lambda
  ListAccountsLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: Using managed policy for Lambda VPC Access that may contain a wildcard which is outside of our control
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ListAccountsLambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: !Sub 'arn:aws:s3:::${S3SourceBucketName}/${ListAccountsS3Key}'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-ListAccounts-function:*'
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                Resource: 
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/AriaIdCAccounts'
              - Effect: Allow
                Action:
                  - 'organizations:ListAccounts'
                Resource:
                  - '*'
      Tags:
          - Key: aria
            Value: role

  # ListAccounts Lambda Function
  ListAccountsLambdaFunction:
    Type: 'AWS::Lambda::Function'
    #checkov:skip=CKV_AWS_116:No need for Dead Letter Queue (DLQ)
    #checkov:skip=CKV_AWS_173:No need to encrypt env variables as nothing sensitive
    #checkov:skip=CKV_AWS_117:Lambda does not need to be in a VPC
    #checkov:skip=CKV_AWS_115:Lambda does not need ReservedConcurrentExecutions
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Lambda does not need to be in a VPC
          - id: W92
            reason: Lambda does not need ReservedConcurrentExecutions
    Properties:
      FunctionName: !Sub '${AWS::StackName}-ListAccounts-function'
      Handler: !Ref PythonHandler
      Role: !GetAtt ListAccountsLambdaExecutionRole.Arn
      PackageType: Zip
      Code:
        S3Bucket: !Ref S3SourceBucketName
        S3Key: !Ref ListAccountsS3Key
      Runtime: python3.13
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          STACK_NAME: !Ref 'AWS::StackName'
          PYTHON_PATH: '/var/task'
      TracingConfig:
        Mode: Active
      Architectures:
        - arm64
      Tags:
          - Key: aria
            Value: function

  # CloudWatch Log Group for ListAccounts Lambda
  ListAccountsLambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    #checkov:skip=CKV_AWS_158:No sensitive data is written out by the Lambda function to the CloudWatch log group
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: No sensitive data is written out by the Lambda function to the CloudWatch log group
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-ListAccounts-function'
      RetentionInDays: 30
      Tags:
          - Key: aria
            Value: log

  # IAM Role for ListUserAccountAssignments Lambda
  ListUserAccountAssignmentsLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: Using managed policy for Lambda VPC Access that may contain a wildcard which is outside of our control
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ListUserAccountAssignmentsLambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: !Sub 'arn:aws:s3:::${S3SourceBucketName}/${ListUserAccountAssignmentsS3Key}'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-ListUserAccountAssignments-function:*'
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                Resource: 
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/AriaIdCUserAccountAssignments'
              - Effect: Allow
                Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Scan'
                Resource: 
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/AriaIdCPermissionSets'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/AriaIdCAccounts'
              - Effect: Allow
                Action:
                  - 'dynamodb:Scan'
                Resource: 
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/AriaIdCUsers'
              - Effect: Allow
                Action:
                  - 'sso:ListInstances'
                  - 'sso:ListPermissionSetsProvisionedToAccount'
                  - 'sso:ListAccountAssignmentsForPrincipal'
                  - 'organizations:ListAccounts'
                  - 'organizations:DescribeOrganization'
                Resource: '*'
      Tags:
          - Key: aria
            Value: role

  # ListUserAccountAssignments Lambda Function
  ListUserAccountAssignmentsLambdaFunction:
    Type: 'AWS::Lambda::Function'
    #checkov:skip=CKV_AWS_116:No need for Dead Letter Queue (DLQ)
    #checkov:skip=CKV_AWS_173:No need to encrypt env variables as nothing sensitive
    #checkov:skip=CKV_AWS_117:Lambda does not need to be in a VPC
    #checkov:skip=CKV_AWS_115:Lambda does not need ReservedConcurrentExecutions
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Lambda does not need to be in a VPC
          - id: W92
            reason: Lambda does not need ReservedConcurrentExecutions
    Properties:
      FunctionName: !Sub '${AWS::StackName}-ListUserAccountAssignments-function'
      Handler: !Ref PythonHandler
      Role: !GetAtt ListUserAccountAssignmentsLambdaExecutionRole.Arn
      PackageType: Zip
      Code:
        S3Bucket: !Ref S3SourceBucketName
        S3Key: !Ref ListUserAccountAssignmentsS3Key
      Runtime: python3.13
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          STACK_NAME: !Ref 'AWS::StackName'
          PYTHON_PATH: '/var/task'
      TracingConfig:
        Mode: Active
      Architectures:
        - arm64
      Tags:
          - Key: aria
            Value: function

  # CloudWatch Log Group for ListUserAccountAssignments Lambda
  ListUserAccountAssignmentsLambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    #checkov:skip=CKV_AWS_158:No sensitive data is written out by the Lambda function to the CloudWatch log group
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: No sensitive data is written out by the Lambda function to the CloudWatch log group
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-ListUserAccountAssignments-function'
      RetentionInDays: 30
      Tags:
          - Key: aria
            Value: log
  
# IAM Role for ListGroupAccountAssignments Lambda
  ListGroupAccountAssignmentsLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: Using managed policy for Lambda VPC Access that may contain a wildcard which is outside of our control
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ListGroupAccountAssignmentsLambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: !Sub 'arn:aws:s3:::${S3SourceBucketName}/${ListGroupAccountAssignmentsS3Key}'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-ListGroupAccountAssignments-function:*'
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:BatchWriteItem'
                Resource: 
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/AriaIdCGroupAccountAssignments'
              - Effect: Allow
                Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Scan'
                Resource: 
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/AriaIdCPermissionSets'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/AriaIdCAccounts'
              - Effect: Allow
                Action:
                  - 'dynamodb:Scan'
                Resource: 
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/AriaIdCGroups'
              - Effect: Allow
                Action:
                  - 'sso:ListInstances'
                  - 'sso:ListPermissionSetsProvisionedToAccount'
                  - 'sso:ListAccountAssignmentsForPrincipal'
                  - 'organizations:ListAccounts'
                  - 'organizations:DescribeOrganization'
                Resource: '*'
      Tags:
          - Key: aria
            Value: role

  # ListGroupAccountAssignments Lambda Function
  ListGroupAccountAssignmentsLambdaFunction:
    Type: 'AWS::Lambda::Function'
    #checkov:skip=CKV_AWS_116:No need for Dead Letter Queue (DLQ)
    #checkov:skip=CKV_AWS_173:No need to encrypt env variables as nothing sensitive
    #checkov:skip=CKV_AWS_117:Lambda does not need to be in a VPC
    #checkov:skip=CKV_AWS_115:Lambda does not need ReservedConcurrentExecutions
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Lambda does not need to be in a VPC
          - id: W92
            reason: Lambda does not need ReservedConcurrentExecutions
    Properties:
      FunctionName: !Sub '${AWS::StackName}-ListGroupAccountAssignments-function'
      Handler: !Ref PythonHandler
      Role: !GetAtt ListGroupAccountAssignmentsLambdaExecutionRole.Arn
      PackageType: Zip
      Code:
        S3Bucket: !Ref S3SourceBucketName
        S3Key: !Ref ListGroupAccountAssignmentsS3Key
      Runtime: python3.13
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          STACK_NAME: !Ref 'AWS::StackName'
          PYTHON_PATH: '/var/task'
      TracingConfig:
        Mode: Active
      Architectures:
        - arm64
      Tags:
          - Key: aria
            Value: function

  # CloudWatch Log Group for ListGroupAccountAssignments Lambda
  ListGroupAccountAssignmentsLambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    #checkov:skip=CKV_AWS_158:No sensitive data is written out by the Lambda function to the CloudWatch log group
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: No sensitive data is written out by the Lambda function to the CloudWatch log group
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-ListGroupAccountAssignments-function'
      RetentionInDays: 30
      Tags:
          - Key: aria
            Value: log

  # IAM Role for GetIAMRoles Lambda
  GetIAMRolesLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    #checkov:skip=CKV_AWS_107:AssumeRole action is required for the Lambda function
    #checkov:skip=CKV_AWS_111:Function requires ability to list all roles and all attached role policies in an AWS account
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: Function requires ability to list all roles and all attached role policies in an AWS account
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: GetIAMRolesLambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: !Sub 'arn:aws:s3:::${S3SourceBucketName}/${GetIAMRolesS3Key}'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-GetIAMRoles-function:*'
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:BatchWriteItem'
                Resource: 
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/AriaIdCIAMRoles'
              - Effect: Allow
                Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Scan'
                Resource: 
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/AriaIdCProvisionedPermissionSets'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/AriaIdCAccounts'
              - Effect: Allow
                Action:
                  - 'organizations:ListAccounts'
                  - 'sts:AssumeRole'
                Resource: '*'
      Tags:
          - Key: aria
            Value: role

  # GetIAMRoles Lambda Function
  GetIAMRolesLambdaFunction:
    Type: 'AWS::Lambda::Function'
    #checkov:skip=CKV_AWS_116:No need for Dead Letter Queue (DLQ)
    #checkov:skip=CKV_AWS_173:No need to encrypt env variables as nothing sensitive
    #checkov:skip=CKV_AWS_117:Lambda does not need to be in a VPC
    #checkov:skip=CKV_AWS_115:Lambda does not need ReservedConcurrentExecutions
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Lambda does not need to be in a VPC
          - id: W92
            reason: Lambda does not need ReservedConcurrentExecutions
    Properties:
      FunctionName: !Sub '${AWS::StackName}-GetIAMRoles-function'
      Handler: !Ref PythonHandler
      Role: !GetAtt GetIAMRolesLambdaExecutionRole.Arn
      PackageType: Zip
      Code:
        S3Bucket: !Ref S3SourceBucketName
        S3Key: !Ref GetIAMRolesS3Key
      Runtime: python3.13
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          STACK_NAME: !Ref 'AWS::StackName'
          PYTHON_PATH: '/var/task'
      TracingConfig:
        Mode: Active
      Architectures:
        - arm64
      Tags:
          - Key: aria
            Value: function

  # CloudWatch Log Group for GetIAMRoles Lambda
  GetIAMRolesLambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    #checkov:skip=CKV_AWS_158:No sensitive data is written out by the Lambda function to the CloudWatch log group
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: No sensitive data is written out by the Lambda function to the CloudWatch log group
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-GetIAMRoles-function'
      RetentionInDays: 30
      Tags:
          - Key: aria
            Value: log

  # IAM Role for S3Export Lambda
  S3ExportLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: Using managed policy for Lambda VPC Access that may contain a wildcard which is outside of our control
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: S3ExportLambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: !Sub 'arn:aws:s3:::${S3SourceBucketName}/${S3ExportS3Key}'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-S3Export-function:*'
              - Effect: Allow
                Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Scan'
                Resource: 
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/AriaIdC*'
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                Resource: !Sub 'arn:aws:s3:::${S3ExportBucketName}/*'
      Tags:
          - Key: aria
            Value: role

  # S3Export Lambda Function
  S3ExportLambdaFunction:
    Type: 'AWS::Lambda::Function'
    #checkov:skip=CKV_AWS_116:No need for Dead Letter Queue (DLQ)
    #checkov:skip=CKV_AWS_173:No need to encrypt env variables as nothing sensitive
    #checkov:skip=CKV_AWS_117:Lambda does not need to be in a VPC
    #checkov:skip=CKV_AWS_115:Lambda does not need ReservedConcurrentExecutions
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Lambda does not need to be in a VPC
          - id: W92
            reason: Lambda does not need ReservedConcurrentExecutions
    Properties:
      FunctionName: !Sub '${AWS::StackName}-S3Export-function'
      Handler: !Ref PythonHandler
      Role: !GetAtt S3ExportLambdaExecutionRole.Arn
      PackageType: Zip
      Code:
        S3Bucket: !Ref S3SourceBucketName
        S3Key: !Ref S3ExportS3Key
      Runtime: python3.13
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          STACK_NAME: !Ref 'AWS::StackName'
          PYTHON_PATH: '/var/task'
      TracingConfig:
        Mode: Active
      Architectures:
        - arm64
      Tags:
          - Key: aria
            Value: function

  # CloudWatch Log Group for S3Export Lambda
  S3ExportLambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    #checkov:skip=CKV_AWS_158:No sensitive data is written out by the Lambda function to the CloudWatch log group
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: No sensitive data is written out by the Lambda function to the CloudWatch log group
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-S3Export-function'
      RetentionInDays: 30
      Tags:
          - Key: aria
            Value: log

  # IAM Role for S3Export Lambda
  AccessAnalyzerFindingIngestionLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: Using managed policy for Lambda VPC Access that may contain a wildcard which is outside of our control
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: AccessAnalyzerFindingIngestionLambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: !Sub 'arn:aws:s3:::${S3SourceBucketName}/${AccessAnalyzerFindingIngestionS3Key}'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-AccessAnalyzerFindingIngestion-function:*'
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                Resource: 
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/AriaIdCAccessAnalyzerFindings'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/AriaIdCUnusedAccessAnalyzerFindings'
      Tags:
          - Key: aria
            Value: role

  # AccessAnalyzerFindingIngestion Lambda Function
  AccessAnalyzerFindingIngestionLambdaFunction:
    Type: 'AWS::Lambda::Function'
    #checkov:skip=CKV_AWS_116:No need for Dead Letter Queue (DLQ)
    #checkov:skip=CKV_AWS_173:No need to encrypt env variables as nothing sensitive
    #checkov:skip=CKV_AWS_117:Lambda does not need to be in a VPC
    #checkov:skip=CKV_AWS_115:Lambda does not need ReservedConcurrentExecutions
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Lambda does not need to be in a VPC
          - id: W92
            reason: Lambda does not need ReservedConcurrentExecutions
    Properties:
      FunctionName: !Sub '${AWS::StackName}-AccessAnalyzerFindingIngestion-function'
      Handler: !Ref PythonHandler
      Role: !GetAtt AccessAnalyzerFindingIngestionLambdaExecutionRole.Arn
      PackageType: Zip
      Code:
        S3Bucket: !Ref S3SourceBucketName
        S3Key: !Ref AccessAnalyzerFindingIngestionS3Key
      Runtime: python3.13
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          STACK_NAME: !Ref 'AWS::StackName'
          PYTHON_PATH: '/var/task'
      TracingConfig:
        Mode: Active
      Architectures:
        - arm64
      Tags:
          - Key: aria
            Value: function

  # CloudWatch Log Group for AccessAnalyzerFindingIngestion Lambda
  AccessAnalyzerFindingIngestionLambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    #checkov:skip=CKV_AWS_158:No sensitive data is written out by the Lambda function to the CloudWatch log group
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: No sensitive data is written out by the Lambda function to the CloudWatch log group
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-AccessAnalyzerFindingIngestion-function'
      RetentionInDays: 30
      Tags:
          - Key: aria
            Value: log

  #Create State Machine
  AriaStateMachine:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      Definition:
        Comment: State machine for Aria
        StartAt: Create DynamoDB Tables
        States:
          Create DynamoDB Tables:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Output: '{% $states.result.Payload %}'
            Arguments:
              FunctionName: !GetAtt CreateTablesLambdaFunction.Arn
            Retry:
              - ErrorEquals:
                  - Lambda.ServiceException
                  - Lambda.AWSLambdaException
                  - Lambda.SdkClientException
                  - Lambda.TooManyRequestsException
                IntervalSeconds: 1
                MaxAttempts: 3
                BackoffRate: 2
                JitterStrategy: FULL
            Next: Parallel1
          Parallel1:
            Type: Parallel
            Next: Parallel2
            Branches:
              - StartAt: List IdC Users
                States:
                  List IdC Users:
                    Type: Task
                    Resource: arn:aws:states:::lambda:invoke
                    Output: '{% $states.result.Payload %}'
                    Arguments:
                      FunctionName: !GetAtt ListUsersLambdaFunction.Arn
                    Retry:
                      - ErrorEquals:
                          - Lambda.ServiceException
                          - Lambda.AWSLambdaException
                          - Lambda.SdkClientException
                          - Lambda.TooManyRequestsException
                        IntervalSeconds: 1
                        MaxAttempts: 3
                        BackoffRate: 2
                        JitterStrategy: FULL
                    End: true
              - StartAt: List IdC Groups
                States:
                  List IdC Groups:
                    Type: Task
                    Resource: arn:aws:states:::lambda:invoke
                    Output: '{% $states.result.Payload %}'
                    Arguments:
                      FunctionName: !GetAtt ListGroupsLambdaFunction.Arn
                    Retry:
                      - ErrorEquals:
                          - Lambda.ServiceException
                          - Lambda.AWSLambdaException
                          - Lambda.SdkClientException
                          - Lambda.TooManyRequestsException
                        IntervalSeconds: 1
                        MaxAttempts: 3
                        BackoffRate: 2
                        JitterStrategy: FULL
                    End: true
              - StartAt: List IdC Accounts
                States:
                  List IdC Accounts:
                    Type: Task
                    Resource: arn:aws:states:::lambda:invoke
                    Output: '{% $states.result.Payload %}'
                    Arguments:
                      FunctionName: !GetAtt ListAccountsLambdaFunction.Arn
                    Retry:
                      - ErrorEquals:
                          - Lambda.ServiceException
                          - Lambda.AWSLambdaException
                          - Lambda.SdkClientException
                          - Lambda.TooManyRequestsException
                        IntervalSeconds: 1
                        MaxAttempts: 3
                        BackoffRate: 2
                        JitterStrategy: FULL
                    End: true
              - StartAt: List IdC Permission Sets
                States:
                  List IdC Permission Sets:
                    Type: Task
                    Resource: arn:aws:states:::lambda:invoke
                    Output: '{% $states.result.Payload %}'
                    Arguments:
                      FunctionName: !GetAtt ListPermissionSetsLambdaFunction.Arn
                    Retry:
                      - ErrorEquals:
                          - Lambda.ServiceException
                          - Lambda.AWSLambdaException
                          - Lambda.SdkClientException
                          - Lambda.TooManyRequestsException
                        IntervalSeconds: 1
                        MaxAttempts: 3
                        BackoffRate: 2
                        JitterStrategy: FULL
                    End: true
          Parallel2:
            Type: Parallel
            Next: List IAM Roles created by IAM Identity Center
            Branches:
              - StartAt: List IdC Group Memberships
                States:
                  List IdC Group Memberships:
                    Type: Task
                    Resource: arn:aws:states:::lambda:invoke
                    Output: '{% $states.result.Payload %}'
                    Arguments:
                      FunctionName: !GetAtt ListGroupMembershipLambdaFunction.Arn
                    Retry:
                      - ErrorEquals:
                          - Lambda.ServiceException
                          - Lambda.AWSLambdaException
                          - Lambda.SdkClientException
                          - Lambda.TooManyRequestsException
                        IntervalSeconds: 1
                        MaxAttempts: 3
                        BackoffRate: 2
                        JitterStrategy: FULL
                    End: true
              - StartAt: List IdC Provisioned Permission Sets
                States:
                  List IdC Provisioned Permission Sets:
                    Type: Task
                    Resource: arn:aws:states:::lambda:invoke
                    Output: '{% $states.result.Payload %}'
                    Arguments:
                      FunctionName: !GetAtt ListProvisionedPermissionSetsLambdaFunction.Arn
                    Retry:
                      - ErrorEquals:
                          - Lambda.ServiceException
                          - Lambda.AWSLambdaException
                          - Lambda.SdkClientException
                          - Lambda.TooManyRequestsException
                        IntervalSeconds: 1
                        MaxAttempts: 3
                        BackoffRate: 2
                        JitterStrategy: FULL
                    End: true
              - StartAt: List IdC User Account Assignments
                States:
                  List IdC User Account Assignments:
                    Type: Task
                    Resource: arn:aws:states:::lambda:invoke
                    Output: '{% $states.result.Payload %}'
                    Arguments:
                      FunctionName: !GetAtt ListUserAccountAssignmentsLambdaFunction.Arn
                    Retry:
                      - ErrorEquals:
                          - Lambda.ServiceException
                          - Lambda.AWSLambdaException
                          - Lambda.SdkClientException
                          - Lambda.TooManyRequestsException
                        IntervalSeconds: 1
                        MaxAttempts: 3
                        BackoffRate: 2
                        JitterStrategy: FULL
                    End: true
              - StartAt: List IdC Group Account Assignments
                States:
                  List IdC Group Account Assignments:
                    Type: Task
                    Resource: arn:aws:states:::lambda:invoke
                    Output: '{% $states.result.Payload %}'
                    Arguments:
                      FunctionName: !GetAtt ListGroupAccountAssignmentsLambdaFunction.Arn
                    Retry:
                      - ErrorEquals:
                          - Lambda.ServiceException
                          - Lambda.AWSLambdaException
                          - Lambda.SdkClientException
                          - Lambda.TooManyRequestsException
                        IntervalSeconds: 1
                        MaxAttempts: 3
                        BackoffRate: 2
                        JitterStrategy: FULL
                    End: true
          List IAM Roles created by IAM Identity Center:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Output: '{% $states.result.Payload %}'
            Arguments:
              FunctionName: !GetAtt GetIAMRolesLambdaFunction.Arn
            Retry:
              - ErrorEquals:
                  - Lambda.ServiceException
                  - Lambda.AWSLambdaException
                  - Lambda.SdkClientException
                  - Lambda.TooManyRequestsException
                IntervalSeconds: 1
                MaxAttempts: 3
                BackoffRate: 2
                JitterStrategy: FULL
            End: true
        QueryLanguage: JSONata
      RoleArn:
        Fn::GetAtt:
          - AriaStateMachineRole
          - Arn
      StateMachineName: AriaStateMachine
      StateMachineType: STANDARD
      EncryptionConfiguration:
        Type: AWS_OWNED_KEY
      LoggingConfiguration:
        Level: 'OFF'
        IncludeExecutionData: false
      Tags:
          - Key: aria
            Value: state
  AriaStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      MaxSessionDuration: 3600
      Tags:
          - Key: aria
            Value: role
  AriaStateMachineRolePolicy:
    Type: AWS::IAM::RolePolicy
    Properties:
      PolicyName: StateMachineLambdaInvokeScopedAccessPolicy
      RoleName:
        Ref: AriaStateMachineRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              - !GetAtt CreateTablesLambdaFunction.Arn
              - !GetAtt ListUsersLambdaFunction.Arn
              - !GetAtt ListGroupsLambdaFunction.Arn
              - !GetAtt ListGroupMembershipLambdaFunction.Arn
              - !GetAtt ListAccountsLambdaFunction.Arn
              - !GetAtt ListPermissionSetsLambdaFunction.Arn
              - !GetAtt ListProvisionedPermissionSetsLambdaFunction.Arn
              - !GetAtt ListUserAccountAssignmentsLambdaFunction.Arn
              - !GetAtt ListGroupAccountAssignmentsLambdaFunction.Arn
              - !GetAtt GetIAMRolesLambdaFunction.Arn

  AriaAccessAnalyzerFindingIngestionEventBridgeInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - 'sts:AssumeRole'
            Condition:
              StringEquals:
                aws:SourceArn:
                  Fn::Sub: >-
                      arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/${AWS::StackName}-Access-Analyzer-Trigger-Ingestion
      Policies:
        - PolicyName: AccessAnalyzerFindingIngestionEventBridgeInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt AccessAnalyzerFindingIngestionLambdaFunction.Arn
      Tags:
          - Key: aria
            Value: role

  AriaAAInternalFindingEventBridgeRule:
    Type: AWS::Events::Rule 
    Properties:
      Name: !Sub '${AWS::StackName}-Internal-Access-Analyzer-Trigger-Ingestion'
      EventPattern: >-
        {"source":["aws.access-analyzer"],"detail-type":["Internal Access
        Finding"],"detail":{"principal":{"AWS":[{"wildcard":"arn:aws:iam::*:role/aws-reserved/sso.amazonaws.com/AWSReservedSSO_*"}]}}}
      State: ENABLED
      EventBusName: default
      Targets:
        - Id: Idd97798e1-e511-4494-8c47-3f25568cd5bc
          Arn: !GetAtt AccessAnalyzerFindingIngestionLambdaFunction.Arn
          RoleArn: !GetAtt AriaAccessAnalyzerFindingIngestionEventBridgeInvokeRole.Arn
  
  AriaAAUnusedFindingEventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${AWS::StackName}-Unused-Access-Analyzer-Trigger-Ingestion'
      EventPattern: >-
        {"source":["aws.access-analyzer"],"detail-type":["Unused Access Finding for IAM entities"],"detail.resource":[{"wildcard":"arn:aws:iam::*:role/aws-reserved/sso.amazonaws.com/AWSReservedSSO_*"}]}
      State: ENABLED
      EventBusName: default
      Targets:
        - Id: Idd97798e1-e511-4494-8c47-3f25568cd5bc
          Arn: !GetAtt AccessAnalyzerFindingIngestionLambdaFunction.Arn
          RoleArn: !GetAtt AriaAccessAnalyzerFindingIngestionEventBridgeInvokeRole.Arn

Outputs:
  GetIAMRolesLambdaFunctionArn:
    Description: 'ARN of the GetIAMRoles Lambda function'
    Value: !GetAtt GetIAMRolesLambdaFunction.Arn
  GetIAMRolesLambdaFunctionName:
    Description: 'Name of the GetIAMRoles Lambda function'
    Value: !Ref GetIAMRolesLambdaFunction
  GetIAMRolesLambdaFunctionIAMRoleArn:
    Description: ARN of IAM role created for GetIAMRoles Lambda function
    Value: !GetAtt GetIAMRolesLambdaExecutionRole.Arn
  S3ExportLambdaFunctionArn:
    Description: 'ARN of the S3Export Lambda function'
    Value: !GetAtt S3ExportLambdaFunction.Arn
    Export:
      Name: 
        Fn::Sub: ${AWS::StackName}-S3ExportLambdaFunctionArn
  S3ExportBucketName:
    Description: 'Name of the S3 Export Bucket'
    Value: !Ref S3ExportBucketName
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-S3ExportBucketName
  StackName:
    Description: 'The stack name'
    Value: !Sub '${AWS::StackName}'
    Export:
      Name: 'Aria-setup-stackname'
  